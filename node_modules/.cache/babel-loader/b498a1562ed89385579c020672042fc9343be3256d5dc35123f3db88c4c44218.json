{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\testpc12\\\\projects\\\\SafePlate\\\\src\\\\games\\\\GameFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { UserSettingsContext } from '../UserSettingsContext';\nimport SortingPlateGame from './SortingPlateGame';\nimport CrossContaminationGame from './CrossContaminationGame';\nimport RestaurantScenarioGame from './RestaurantScenarioGame';\nimport LabelReadingGame from './LabelReadingGame';\nimport Scoreboard from '../components/Scoreboard';\n\n/*\r\n  This \"GameFlow\" organizes a multi-level progression:\r\n  1) SortingPlateGame\r\n  2) CrossContaminationGame (if age > 4)\r\n  3) RestaurantScenarioGame (if age > 7)\r\n  4) LabelReadingGame (if age > 7)\r\n  etc.\r\n\r\n  The user \"wins\" if they complete all levels without losing all lives.\r\n  The user \"loses\" if lives <= 0 at any point.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameFlow() {\n  _s();\n  const {\n    ageGroup,\n    lives,\n    setLives,\n    score,\n    setScore\n  } = useContext(UserSettingsContext);\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Decide which mini-games to include based on age\n  let levelSequence = [/*#__PURE__*/_jsxDEV(SortingPlateGame, {\n    next: handleNext\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 24\n  }, this)]; // Always sorting first\n\n  if (ageGroup !== '2-4') {\n    levelSequence.push(/*#__PURE__*/_jsxDEV(CrossContaminationGame, {\n      next: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }, this));\n  }\n  if (ageGroup === '8-12' || ageGroup === 'teens') {\n    levelSequence.push(/*#__PURE__*/_jsxDEV(RestaurantScenarioGame, {\n      next: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }, this));\n    levelSequence.push(/*#__PURE__*/_jsxDEV(LabelReadingGame, {\n      next: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 24\n    }, this));\n  }\n\n  // Handler for completing a mini-game\n  function handleNext(pointsEarned, lostLife) {\n    // Increase score\n    setScore(score + (pointsEarned || 0));\n\n    // Optionally reduce lives\n    if (lostLife) {\n      setLives(lives - 1);\n    }\n    if (lives - (lostLife ? 1 : 0) <= 0) {\n      setGameOver(true);\n      return;\n    }\n\n    // Move to next level\n    const newLevel = currentLevel + 1;\n    if (newLevel >= levelSequence.length) {\n      // Completed all levels\n      setGameOver(true);\n    } else {\n      setCurrentLevel(newLevel);\n    }\n  }\n  if (!levelSequence.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No levels available for this age group.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameOver) {\n    // Win if we reached beyond last level with lives > 0, lose if lives <= 0\n    const didWin = lives > 0 && currentLevel >= levelSequence.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '40px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Scoreboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: didWin ? 'Congratulations!' : 'Game Over!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: didWin ? 'You completed all levels!' : 'You ran out of lives.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Final Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Scoreboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), levelSequence[currentLevel]]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(GameFlow, \"9mGsNrb8MrYcer56QgiYGfet5vU=\");\n_c = GameFlow;\nexport default GameFlow;\nvar _c;\n$RefreshReg$(_c, \"GameFlow\");","map":{"version":3,"names":["React","useContext","useState","UserSettingsContext","SortingPlateGame","CrossContaminationGame","RestaurantScenarioGame","LabelReadingGame","Scoreboard","jsxDEV","_jsxDEV","GameFlow","_s","ageGroup","lives","setLives","score","setScore","currentLevel","setCurrentLevel","gameOver","setGameOver","levelSequence","next","handleNext","fileName","_jsxFileName","lineNumber","columnNumber","push","pointsEarned","lostLife","newLevel","length","children","didWin","style","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/testpc12/projects/SafePlate/src/games/GameFlow.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { UserSettingsContext } from '../UserSettingsContext';\r\nimport SortingPlateGame from './SortingPlateGame';\r\nimport CrossContaminationGame from './CrossContaminationGame';\r\nimport RestaurantScenarioGame from './RestaurantScenarioGame';\r\nimport LabelReadingGame from './LabelReadingGame';\r\nimport Scoreboard from '../components/Scoreboard';\r\n\r\n/*\r\n  This \"GameFlow\" organizes a multi-level progression:\r\n  1) SortingPlateGame\r\n  2) CrossContaminationGame (if age > 4)\r\n  3) RestaurantScenarioGame (if age > 7)\r\n  4) LabelReadingGame (if age > 7)\r\n  etc.\r\n\r\n  The user \"wins\" if they complete all levels without losing all lives.\r\n  The user \"loses\" if lives <= 0 at any point.\r\n*/\r\n\r\nfunction GameFlow() {\r\n  const { ageGroup, lives, setLives, score, setScore } = useContext(UserSettingsContext);\r\n  const [currentLevel, setCurrentLevel] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  // Decide which mini-games to include based on age\r\n  let levelSequence = [<SortingPlateGame next={handleNext} />]; // Always sorting first\r\n\r\n  if (ageGroup !== '2-4') {\r\n    levelSequence.push(<CrossContaminationGame next={handleNext} />);\r\n  }\r\n  if (ageGroup === '8-12' || ageGroup === 'teens') {\r\n    levelSequence.push(<RestaurantScenarioGame next={handleNext} />);\r\n    levelSequence.push(<LabelReadingGame next={handleNext} />);\r\n  }\r\n\r\n  // Handler for completing a mini-game\r\n  function handleNext(pointsEarned, lostLife) {\r\n    // Increase score\r\n    setScore(score + (pointsEarned || 0));\r\n\r\n    // Optionally reduce lives\r\n    if (lostLife) {\r\n      setLives(lives - 1);\r\n    }\r\n    if (lives - (lostLife ? 1 : 0) <= 0) {\r\n      setGameOver(true);\r\n      return;\r\n    }\r\n\r\n    // Move to next level\r\n    const newLevel = currentLevel + 1;\r\n    if (newLevel >= levelSequence.length) {\r\n      // Completed all levels\r\n      setGameOver(true);\r\n    } else {\r\n      setCurrentLevel(newLevel);\r\n    }\r\n  }\r\n\r\n  if (!levelSequence.length) {\r\n    return <div>No levels available for this age group.</div>;\r\n  }\r\n\r\n  if (gameOver) {\r\n    // Win if we reached beyond last level with lives > 0, lose if lives <= 0\r\n    const didWin = lives > 0 && currentLevel >= levelSequence.length;\r\n    return (\r\n      <div style={{ textAlign: 'center', marginTop: '40px' }}>\r\n        <Scoreboard />\r\n        <h2>{didWin ? 'Congratulations!' : 'Game Over!'}</h2>\r\n        <p>{didWin ? 'You completed all levels!' : 'You ran out of lives.'}</p>\r\n        <p>Final Score: {score}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <Scoreboard />\r\n      {levelSequence[currentLevel]}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}