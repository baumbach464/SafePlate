{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\testpc12\\\\projects\\\\SafePlate\\\\src\\\\games\\\\LabelReadingGame.js\",\n  _s = $RefreshSig$();\n// /src/games/LabelReadingGame.js\nimport React, { useState } from 'react';\nimport './LabelReadingGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allergenEmojis = {\n  peanut: 'ü•ú',\n  wheat: 'üåæ',\n  milk: 'ü•õ',\n  eggs: 'ü•ö'\n};\nfunction LabelReadingGame() {\n  _s();\n  const [selectedWords, setSelectedWords] = useState([]);\n  const ingredientList = \"Peanut oil, sugar, wheat flour, salt\";\n  const allergenKeyword = \"peanut\";\n  const words = ingredientList.split(', ');\n  const handleWordClick = word => {\n    if (!selectedWords.includes(word)) {\n      setSelectedWords([...selectedWords, word]);\n    }\n  };\n  const containsAllergen = selectedWords.some(word => word.toLowerCase().includes(allergenKeyword));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"label-reading-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Label Reading Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Tap the words that indicate an allergen. Look for emoji clues!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ingredient-list\",\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => handleWordClick(word),\n        className: `ingredient-word ${selectedWords.includes(word) ? 'selected' : ''}`,\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), selectedWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You selected: \", selectedWords.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), containsAllergen ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"warning\",\n        children: [\"Oops! This label contains \", allergenEmojis['peanut'], \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success\",\n        children: \"Good job, no allergens detected! \\uD83D\\uDC4D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(LabelReadingGame, \"eEDjz7dc3UBCEYRpSYFGbMTiebs=\");\n_c = LabelReadingGame;\nexport default LabelReadingGame;\nvar _c;\n$RefreshReg$(_c, \"LabelReadingGame\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","allergenEmojis","peanut","wheat","milk","eggs","LabelReadingGame","_s","selectedWords","setSelectedWords","ingredientList","allergenKeyword","words","split","handleWordClick","word","includes","containsAllergen","some","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","length","join","_c","$RefreshReg$"],"sources":["C:/Users/testpc12/projects/SafePlate/src/games/LabelReadingGame.js"],"sourcesContent":["// /src/games/LabelReadingGame.js\r\nimport React, { useState } from 'react';\r\nimport './LabelReadingGame.css';\r\n\r\nconst allergenEmojis = {\r\n  peanut: 'ü•ú',\r\n  wheat: 'üåæ',\r\n  milk: 'ü•õ',\r\n  eggs: 'ü•ö'\r\n};\r\n\r\nfunction LabelReadingGame() {\r\n  const [selectedWords, setSelectedWords] = useState([]);\r\n  const ingredientList = \"Peanut oil, sugar, wheat flour, salt\";\r\n  const allergenKeyword = \"peanut\"; \r\n  const words = ingredientList.split(', ');\r\n\r\n  const handleWordClick = (word) => {\r\n    if (!selectedWords.includes(word)) {\r\n      setSelectedWords([...selectedWords, word]);\r\n    }\r\n  };\r\n\r\n  const containsAllergen = selectedWords.some(word => word.toLowerCase().includes(allergenKeyword));\r\n\r\n  return (\r\n    <div className=\"label-reading-game\">\r\n      <h2>Label Reading Game</h2>\r\n      <p>Tap the words that indicate an allergen. Look for emoji clues!</p>\r\n      <div className=\"ingredient-list\">\r\n        {words.map((word, index) => (\r\n          <span\r\n            key={index}\r\n            onClick={() => handleWordClick(word)}\r\n            className={`ingredient-word ${selectedWords.includes(word) ? 'selected' : ''}`}\r\n          >\r\n            {word}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      {selectedWords.length > 0 && (\r\n        <div className=\"result\">\r\n          <p>You selected: {selectedWords.join(', ')}</p>\r\n          {containsAllergen ? (\r\n            <p className=\"warning\">Oops! This label contains {allergenEmojis['peanut']}!</p>\r\n          ) : (\r\n            <p className=\"success\">Good job, no allergens detected! üëç</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabelReadingGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}